// scripts/improved_seo_categories.js
// Script mejorado para categorizar productos con las categor√≠as SEO espec√≠ficas

const fs = require('fs');
const path = require('path');

console.log('üöÄ Iniciando categorizaci√≥n mejorada con categor√≠as SEO espec√≠ficas...');

// Definir las 14 categor√≠as SEO con keywords m√°s espec√≠ficos
const seoCategories = {
  'frutas-verduras-granel': {
    name: 'Frutas y Verduras a Granel',
    keywords: [
      // Verduras
      'betabel', 'zanahoria', 'lechuga', 'espinaca', 'apio', 'cilantro', 'perejil', 'acelga',
      'br√≥coli', 'coliflor', 'col', 'repollo', 'kale', 'ar√∫gula', 'r√°bano', 'nabo',
      'jitomate', 'tomate', 'pepino', 'calabaza', 'calabac√≠n', 'chayote', 'elote', 'ma√≠z',
      'cebolla', 'ajo', 'puerro', 'papa', 'camote', 'yuca', 'jicama', 'ch√≠charo',
      'ejote', 'haba', 'verdolaga', 'quelite', 'epazote', 'hierba', 'santa',
      // Frutas
      'manzana', 'pera', 'durazno', 'chabacano', 'ciruela', 'uva', 'fresa', 'frambuesa',
      'mora', 'zarzamora', 'ar√°ndano', 'pl√°tano', 'mango', 'papaya', 'pi√±a', 'sand√≠a',
      'mel√≥n', 'naranja', 'lim√≥n', 'lima', 'toronja', 'mandarina', 'tuna', 'xoconostle',
      'aguacate', 'guayaba', 'tejocote', 'capul√≠n', 'granada', 'higo', 'kiwi', 'maracuy√°'
    ]
  },
  'granos-cereales-integrales': {
    name: 'Granos y cereales integrales',
    keywords: [
      'arroz', 'frijol', 'lenteja', 'garbanzo', 'haba', 'alverj√≥n', 'quinoa', 'amaranto',
      'avena', 'trigo', 'cebada', 'centeno', 'mijo', 'sorgo', 'ch√≠a', 'linaza',
      'ajonjol√≠', 's√©samo', 'girasol', 'calabaza', 'semilla', 'grano', 'cereal'
    ]
  },
  'especias-condimentos': {
    name: 'Especias y condimentos artesanales',
    keywords: [
      'chile', 'chipotle', 'guajillo', 'ancho', 'mulato', 'pasilla', 'serrano', 'jalape√±o',
      'habanero', 'piqu√≠n', 'cayena', 'paprika', 'piment√≥n', 'pimienta', 'comino',
      'or√©gano', 'tomillo', 'romero', 'albahaca', 'mejorana', 'laurel', 'canela',
      'clavo', 'nuez moscada', 'cardamomo', 'an√≠s', 'hinojo', 'c√∫rcuma', 'jengibre',
      'sal', 'especias', 'condimento', 'sazonador', 'hierba arom√°tica'
    ]
  },
  'aceites-naturales': {
    name: 'Aceites naturales',
    keywords: ['aceite', 'oliva', 'coco', 'aguacate', 'girasol', 'ajonjol√≠', 'prensado fr√≠o']
  },
  'cafe-cacao-chocolate': {
    name: 'Caf√©, cacao y chocolate artesanal',
    keywords: ['caf√©', 'cacao', 'chocolate', 'cocoa', 'tostado', 'molido', 'grano', 'bean']
  },
  'endulzantes-naturales': {
    name: 'Endulzantes naturales',
    keywords: ['miel', 'piloncillo', 'panela', 'az√∫car mascabado', 'jarabe', 'agave', 'maple', 'endulzante']
  },
  'mermeladas-untables': {
    name: 'Mermeladas y untables naturales',
    keywords: ['mermelada', 'jalea', 'untable', 'conserva', 'dulce', 'cajeta', 'ate']
  },
  'huevo-lacteos': {
    name: 'Huevo de libre pastoreo y l√°cteos artesanales',
    keywords: ['huevo', 'queso', 'yogurt', 'crema', 'mantequilla', 'leche', 'l√°cteo', 'gallina', 'libre pastoreo']
  },
  'tes-infusiones': {
    name: 'T√©s e infusiones naturales',
    keywords: ['t√©', 'infusi√≥n', 'tisana', 'manzanilla', 'hierbabuena', 'menta', 'tila', 'gordolobo', 'bugambilia']
  },
  'harinas-pastas': {
    name: 'Harinas y pastas org√°nicas',
    keywords: ['harina', 'pasta', 'fideo', 'macarr√≥n', 'espagueti', 'integral', 'org√°nica']
  },
  'pan-galletas': {
    name: 'Pan y galletas artesanales',
    keywords: ['pan', 'galleta', 'bollito', 'masa madre', 'integral', 'artesanal', 'panader√≠a']
  },
  'proteinas-regenerativas': {
    name: 'Prote√≠nas Regenerativas',
    keywords: ['pollo', 'pavo', 'cerdo', 'res', 'carne', 'libre pastoreo', 'regenerativo', 'prote√≠na animal']
  },
  'canastas-frutas-verduras': {
    name: 'Canastas de frutas y verduras agroecol√≥gicas',
    keywords: ['canasta', 'caja', 'surtido', 'variedad', 'mix', 'combinado']
  },
  'productos-arca-tierra': {
    name: 'Productos Arca Tierra',
    keywords: ['bolsa', 'gorra', 'playera', 'camiseta', 'taza', 'merchandising', 'arca tierra']
  }
};

// Funci√≥n mejorada para determinar la categor√≠a
function determineCategoryImproved(productName, currentCategory) {
  const name = productName.toLowerCase().trim();
  let bestMatch = { category: 'frutas-verduras-granel', score: 0 };

  // Buscar coincidencias en todas las categor√≠as
  for (const [categoryId, categoryData] of Object.entries(seoCategories)) {
    let score = 0;
    
    for (const keyword of categoryData.keywords) {
      const keywordLower = keyword.toLowerCase();
      
      // Coincidencia exacta de palabra completa (mayor puntaje)
      const exactWordRegex = new RegExp(`\\b${keywordLower}\\b`, 'i');
      if (exactWordRegex.test(name)) {
        score += 10;
      }
      // Coincidencia parcial (menor puntaje)
      else if (name.includes(keywordLower)) {
        score += 3;
      }
    }
    
    if (score > bestMatch.score) {
      bestMatch = { category: categoryId, score: score };
    }
  }

  // Si no hay buena coincidencia, usar l√≥gica adicional
  if (bestMatch.score === 0) {
    // An√°lisis de patrones adicionales
    if (name.match(/verdura|hortaliza|vegetal/)) return 'frutas-verduras-granel';
    if (name.match(/fruta|frutal/)) return 'frutas-verduras-granel';
    if (name.match(/grano|cereal|leguminosa/)) return 'granos-cereales-integrales';
    if (name.match(/condimento|especia|sazonador/)) return 'especias-condimentos';
  }

  return bestMatch.category;
}

try {
  const productosPath = path.join(__dirname, '../src/data/productos.ts');
  let productosContent = fs.readFileSync(productosPath, 'utf8');
  
  console.log('üìñ Archivo de productos le√≠do correctamente');
  
  // Analizar algunos productos para debug
  console.log('\nüîç Analizando algunos productos de ejemplo:');
  const sampleMatches = productosContent.match(/"nombre":\s*"([^"]+)"/g);
  if (sampleMatches) {
    for (let i = 0; i < Math.min(10, sampleMatches.length); i++) {
      const nameMatch = sampleMatches[i].match(/"nombre":\s*"([^"]+)"/);
      if (nameMatch) {
        const productName = nameMatch[1];
        const category = determineCategoryImproved(productName, '');
        console.log(`  - "${productName}" ‚Üí ${category}`);
      }
    }
  }

  // Contar categor√≠as antes
  const beforeMatches = productosContent.match(/"categoria":\s*"([^"]+)"/g) || [];
  const beforeCategories = {};
  beforeMatches.forEach(match => {
    const category = match.match(/"categoria":\s*"([^"]+)"/)[1];
    beforeCategories[category] = (beforeCategories[category] || 0) + 1;
  });
  
  console.log('\nüìä Categor√≠as antes de la actualizaci√≥n:');
  Object.entries(beforeCategories).forEach(([cat, count]) => {
    console.log(`  - ${cat}: ${count} productos`);
  });

  // Aplicar nueva categorizaci√≥n
  let updatedCount = 0;
  const categoryChanges = [];
  
  productosContent = productosContent.replace(
    /(\s*"nombre":\s*"([^"]+)"[\s\S]*?"categoria":\s*)"([^"]+)"/g,
    (match, prefix, productName, currentCategory) => {
      const newCategory = determineCategoryImproved(productName, currentCategory);
      
      if (newCategory !== currentCategory) {
        updatedCount++;
        categoryChanges.push({
          product: productName,
          from: currentCategory,
          to: newCategory
        });
      }
      
      return `${prefix}"${newCategory}"`;
    }
  );

  // Mostrar cambios
  console.log(`\nüîÑ Cambios realizados (${updatedCount} productos actualizados):`);
  categoryChanges.slice(0, 20).forEach(change => {
    console.log(`  ‚úÖ ${change.product}: ${change.from} ‚Üí ${change.to}`);
  });
  if (categoryChanges.length > 20) {
    console.log(`  ... y ${categoryChanges.length - 20} cambios m√°s`);
  }

  // Contar categor√≠as despu√©s
  const afterMatches = productosContent.match(/"categoria":\s*"([^"]+)"/g) || [];
  const afterCategories = {};
  afterMatches.forEach(match => {
    const category = match.match(/"categoria":\s*"([^"]+)"/)[1];
    afterCategories[category] = (afterCategories[category] || 0) + 1;
  });
  
  console.log('\nüìä Categor√≠as despu√©s de la actualizaci√≥n:');
  Object.entries(afterCategories).forEach(([cat, count]) => {
    console.log(`  - ${cat}: ${count} productos`);
  });

  // Actualizar lista de categor√≠as en el archivo
  const newCategoriesList = Object.keys(afterCategories).sort();
  productosContent = productosContent.replace(
    /export const categorias = \[([\s\S]*?)\];/,
    `export const categorias = [\n  "${newCategoriesList.join('",\n  "')}"\n];`
  );

  // Actualizar estad√≠sticas
  const timestamp = new Date().toISOString();
  productosContent = productosContent.replace(
    /categories: \d+,/,
    `categories: ${newCategoriesList.length},`
  );
  productosContent = productosContent.replace(
    /rebuiltAt: '[^']*'/,
    `rebuiltAt: '${timestamp}'`
  );

  // Crear backup y guardar
  const backupPath = `${productosPath}.backup-improved-seo.${Date.now()}`;
  fs.writeFileSync(backupPath, fs.readFileSync(productosPath));
  fs.writeFileSync(productosPath, productosContent);

  // Generar reporte final
  const report = {
    timestamp,
    totalProducts: afterMatches.length,
    updatedProducts: updatedCount,
    categoriesBefore: beforeCategories,
    categoriesAfter: afterCategories,
    availableSeoCategories: Object.keys(seoCategories),
    usedSeoCategories: newCategoriesList,
    categoryChanges: categoryChanges.slice(0, 50), // Primeros 50 cambios
    backupFile: path.basename(backupPath)
  };

  const reportPath = path.join(__dirname, 'improved_seo_categories_report.json');
  fs.writeFileSync(reportPath, JSON.stringify(report, null, 2));

  console.log(`\n‚úÖ Categorizaci√≥n mejorada completada!`);
  console.log(`üìà ${updatedCount} productos actualizados`);
  console.log(`üè∑Ô∏è  ${newCategoriesList.length} categor√≠as SEO utilizadas`);
  console.log(`üìÑ Reporte: ${path.basename(reportPath)}`);
  console.log(`üíæ Backup: ${path.basename(backupPath)}`);

} catch (error) {
  console.error('‚ùå Error:', error.message);
  process.exit(1);
}
